
[00:14, 08/01/2025] Han: % Communication between Arduino and MATLAB
% Enhanced GUI for Motor Control with Real-time Plotting and Kinematics
close all;
clear all;

% Declare global variables
global s hInputX hInputY hMotor1Angle hMotor2Angle hStatusText hPlot hTimer c y1 y2;
global r1 r2;
global originTheta1 originTheta2;

% Robot arm parameters (link lengths)
r1 = 8.5; % Length of link 1
r2 = 8;   % Length of link 2

% Initialize origin angles
originTheta1 = 0;
originTheta2 = 0;

%% Setup serial communication
try
    s = serialport("COM3", 115200); % Ensure "COM3" is correct
    configureTerminator(s, "CR/LF");
catch
    errordlg('Failed to connect to Arduino. Check COM port.', 'Connection Error');
    return;
end

% Initialize variables for real-time plotting
c = [];
y1 = [];
y2 = â€¦
[00:14, 08/01/2025] Han: // Define constants for pulses per revolution (PPR) and gear ratio (GR)
const float PPR1 = 601.1077;
const float PPR2 = 3575.0855;
const float GR1 = 50.092;
const float GR2 = 297.924;
const float CPR = 3; // Cycles per revolution

// Variables for tracking encoder position and speed
volatile long counter_m1 = 0, counter_m2 = 0;

// Define pins for encoders and motors
const int encoderPinA_m1 = 2, encoderPinB_m1 = 10;
const int encoderPinA_m2 = 3, encoderPinB_m2 = 11;
const int motorPin1_m1 = 4, motorPin2_m1 = 5, enablePin_m1 = 6;
const int motorPin1_m2 = 7, motorPin2_m2 = 8, enablePin_m2 = 9;

// Variables for tracking encoder positions
int aLastState_m1;
int aLastState_m2;

// PID gains
float Kp_m1 = 16, Ki_m1 = 0, Kd_m1 = 0.5;
float Kp_m2 = 24, Ki_m2 = 0, Kd_m2 = 0.5;

// Position and demand
float demandPositionInDegrees_m1 = 50, demandPositionInDegrees_m2 = 30;
float currentPositionInDegrees_m1 = 0, currentPositionInDegrees_m2 = 0;

// MATLAB communication
String matlabStr = "";
bool readyToSend = false;

void setup() {
  Serial.begin(115200);

  pinMode(encoderPinA_m1, INPUT_PULLUP);
  pinMode(encoderPinB_m1, INPUT_PULLUP);
  pinMode(encoderPinA_m2, INPUT_PULLUP);
  pinMode(encoderPinB_m2, INPUT_PULLUP);
  pinMode(motorPin1_m1, OUTPUT);
  pinMode(motorPin2_m1, OUTPUT);
  pinMode(enablePin_m1, OUTPUT);
  pinMode(motorPin1_m2, OUTPUT);
  pinMode(motorPin2_m2, OUTPUT);
  pinMode(enablePin_m2, OUTPUT);

  attachInterrupt(digitalPinToInterrupt(encoderPinA_m1), updateEncoder_m1, CHANGE);
  attachInterrupt(digitalPinToInterrupt(encoderPinA_m2), updateEncoder_m2, CHANGE);

  aLastState_m1 = digitalRead(encoderPinA_m1);
  aLastState_m2 = digitalRead(encoderPinA_m2);
}

void loop() {
  readMATLABCommand();  // Read commands from MATLAB
  controlMotors();      // Control motors based on PID
  sendDataToMATLAB();   // Send data to MATLAB
}

// Read commands from MATLAB
void readMATLABCommand() {
  while (Serial.available() > 0) {
    char c = Serial.read();
    matlabStr += c;

    if (matlabStr.indexOf(";") != -1) {
      int posComma = matlabStr.indexOf(",");
      demandPositionInDegrees_m1 = matlabStr.substring(1, posComma).toFloat();
      demandPositionInDegrees_m2 = matlabStr.substring(posComma + 1, matlabStr.indexOf(";")).toFloat();
      matlabStr = ""; // Clear command buffer
    }
  }
}

// Control motors using PID
void controlMotors() {
  currentPositionInDegrees_m1 = ((counter_m1 * 360) / (CPR * GR1 * 2));
  currentPositionInDegrees_m2 = ((counter_m2 * 360) / (CPR * GR2 * 2));

  float error_m1 = demandPositionInDegrees_m1 - currentPositionInDegrees_m1;
  float output_m1 = Kp_m1 * error_m1;

  float error_m2 = demandPositionInDegrees_m2 - currentPositionInDegrees_m2;
  float output_m2 = Kp_m2 * error_m2;

  // Scale factor to reduce motor speed
  float speedScaleFactor = 0.1; // 0.5 means reducing speed by half
  output_m1 *= speedScaleFactor;
  output_m2 *= speedScaleFactor;

  controlMotor1(output_m1);
  controlMotor2(output_m2);
}

// Send data to MATLAB
void sendDataToMATLAB() {
  Serial.print("c");
  Serial.print(currentPositionInDegrees_m1);
  Serial.print(",");
  Serial.print(currentPositionInDegrees_m2);
  Serial.println();
}

// Control Motor 1
void controlMotor1(float output) {
    if (output < 0) {
      digitalWrite(motorPin1_m1, LOW);
      digitalWrite(motorPin2_m1, HIGH);
      analogWrite(enablePin_m1, abs(output)); // Use absolute value
    } else {
      digitalWrite(motorPin1_m1, HIGH);
      digitalWrite(motorPin2_m1, LOW);
      analogWrite(enablePin_m1, abs(output)); // Use absolute value
    }
}

// Control Motor 2
void controlMotor2(float output) {
    if (output > 0) {
      digitalWrite(motorPin1_m2, LOW);
      digitalWrite(motorPin2_m2, HIGH);
      analogWrite(enablePin_m2, output);
    } else {
      digitalWrite(motorPin1_m2, HIGH);
      digitalWrite(motorPin2_m2, LOW);
      analogWrite(enablePin_m2, -output);
    }
}

// Update encoder for Motor 1
void updateEncoder_m1() {
  int aState_m1 = digitalRead(encoderPinA_m1); // Read current state of encoder A pin
  if (aState_m1 != aLastState_m1) { // If state changes
    if (digitalRead(encoderPinB_m1) != aState_m1) {
      counter_m1++; // Clockwise rotation
    } else {
      counter_m1--; // Counterclockwise rotation
    }
    aLastState_m1 = aState_m1; // Update last state
  }
}

// Update encoder for Motor 2
void updateEncoder_m2() {
  int aState_m2 = digitalRead(encoderPinA_m2); // Read current state of encoder A pin
  if (aState_m2 != aLastState_m2) { // If state changes
    if (digitalRead(encoderPinB_m2) != aState_m2) {
      counter_m2++; // Clockwise rotation
    } else {
      counter_m2--; // Counterclockwise rotation
    }
    aLastState_m2 = aState_m2; // Update last state
  }
}

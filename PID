// Define constants for pulses per revolution (PPR) and gear ratio (GR)
const float PPR1 = 601.1077;
const float PPR2 = 3575.0855;
const float GR1 = 50.092;
const float GR2 = 297.924;
const float CPR = 3; // cycles per revolution

// Variables for tracking speed
long lastCounter_m1 = 0;
long lastCounter_m2 = 0;
unsigned long lastTime_m1 = 0;
unsigned long lastTime_m2 = 0;
float speed_m1 = 0;  // Motor 1 speed (degrees per second)
float speed_m2 = 0;  // Motor 2 speed (degrees per second)

// Variables for tracking encoder positions
volatile long counter_m1 = 0;
volatile long counter_m2 = 0;
int aLastState_m1;
int aLastState_m2;

// Pins for reading encoders of motor 1 and 2
const int encoderPinA_m1 = 2;
const int encoderPinB_m1 = 10;
const int encoderPinA_m2 = 3;
const int encoderPinB_m2 = 11;

// Pins for setting the direction of motor 1 and 2
const int motorPin1_m1 = 4;
const int motorPin2_m1 = 5;
const int motorPin1_m2 = 7;
const int motorPin2_m2 = 8;

// Pins for setting the speed of rotation (Enable pin) of motors 1 and 2
const int enablePin_m1 = 6;
const int enablePin_m2 = 9;

// Variables for encoder positions and desired positions
long currentPosition_m1 = 0;
long currentPosition_m2 = 0;
float demandPositionInDegrees_m1 = 0;  //>0c
float demandPositionInDegrees_m2 = 0; //>0ac
float currentPositionInDegrees_m1;
float currentPositionInDegrees_m2;

// Time parameters
unsigned long currentTime;
unsigned long previousTime = 0;
unsigned long deltaT;

// PID gains
float Kp_m1 = 16, Kd_m1 = 0.5, Ki_m1 = 0; // Start with P, then D, then I. Low P will be slow
float Kp_m2 = 24, Kd_m2 = 0.5, Ki_m2 = 0;

// Error values
float errorPositionInDegrees_prev_m1 = 0, errorPositionInDegrees_sum_m1 = 0;
float errorPositionInDegrees_prev_m2 = 0, errorPositionInDegrees_sum_m2 = 0;

// Dead zone threshold for PID output
float deadZone = 0.01;

// Variables for filtering PID output
float previousControllerOutput_m1 = 0;
float previousControllerOutput_m2 = 0;

void setup() {
  Serial.begin(115200);

  // Task 1: Initialize the pins using pinMode and attachInterrupt functions
  pinMode(encoderPinA_m1, INPUT_PULLUP);
  pinMode(encoderPinA_m2, INPUT_PULLUP);
  pinMode(encoderPinB_m1, INPUT_PULLUP);
  pinMode(encoderPinB_m2, INPUT_PULLUP);

  pinMode(motorPin1_m1, OUTPUT);
  pinMode(motorPin2_m1, OUTPUT);
  pinMode(enablePin_m1, OUTPUT);
  pinMode(motorPin1_m2, OUTPUT);
  pinMode(motorPin2_m2, OUTPUT);
  pinMode(enablePin_m2, OUTPUT);

  attachInterrupt(digitalPinToInterrupt(encoderPinA_m1), updateEncoder_m1, CHANGE);
  attachInterrupt(digitalPinToInterrupt(encoderPinA_m2), updateEncoder_m2, CHANGE);

  aLastState_m1 = digitalRead(encoderPinA_m1);
  aLastState_m2 = digitalRead(encoderPinA_m2);

  delay(3000);
  previousTime = micros();
}

void loop() {
  Serial.println(counter_m1);

  // Task 2: Compute the current position in degrees and bound it to [-360,360]
  currentPositionInDegrees_m1 = ((counter_m1 * 360) / (CPR * GR1 * 2));
  if (currentPositionInDegrees_m1 >= 360.0 || currentPositionInDegrees_m1 <= -360.0) {
    counter_m1 -= ((GR1 * CPR * 2) * ((int)(currentPositionInDegrees_m1 / 360)));
  }
  currentPositionInDegrees_m2 = ((counter_m2 * 360) / (CPR * GR2 * 2));
  if (currentPositionInDegrees_m2 >= 360.0 || currentPositionInDegrees_m2 <= -360.0) {
    counter_m2 -= ((GR2 * CPR * 2) * ((int)(currentPositionInDegrees_m2 / 360)));
  }

  // Task 3: Compute elapsed time (deltaT) and control the frequency of printing
  currentTime = micros();
  deltaT = currentTime - previousTime;
  previousTime = currentTime;
  Serial.println(deltaT);

  if (deltaT > 400) {
    // Task 4: Compute error (P, I, D), and ensure that the previous error is updated
    float errorPositionInDegrees_m1 = demandPositionInDegrees_m1 - currentPositionInDegrees_m1;
    float errorPositionInDegrees_diff_m1 = (errorPositionInDegrees_m1 - errorPositionInDegrees_prev_m1) / deltaT;
    errorPositionInDegrees_sum_m1 += errorPositionInDegrees_m1;
    errorPositionInDegrees_prev_m1 = errorPositionInDegrees_m1;

    float errorPositionInDegrees_m2 = demandPositionInDegrees_m2 - currentPositionInDegrees_m2;
    float errorPositionInDegrees_diff_m2 = (errorPositionInDegrees_m2 - errorPositionInDegrees_prev_m2) / deltaT;
    errorPositionInDegrees_sum_m2 += errorPositionInDegrees_m2;
    errorPositionInDegrees_prev_m2 = errorPositionInDegrees_m2;

    // Task 5: Compute the PID output
    float controllerOutput_m1 = errorPositionInDegrees_m1 * Kp_m1 + errorPositionInDegrees_diff_m1 * Kd_m1 + errorPositionInDegrees_sum_m1 * Ki_m1 * deltaT;
    float controllerOutput_m2 = errorPositionInDegrees_m2 * Kp_m2 + errorPositionInDegrees_diff_m2 * Kd_m2 + errorPositionInDegrees_sum_m2 * Ki_m2 * deltaT;

    // Dead zone: if the error is within the dead zone, don't move the motor
    if (abs(errorPositionInDegrees_m1) < deadZone) {
      controllerOutput_m1 = 0;
    }

    if (abs(errorPositionInDegrees_m2) < deadZone) {
      controllerOutput_m2 = 0;
    }

    // Filter the PID output to avoid sudden jumps
    controllerOutput_m1 = controllerOutput_m1 * 0.5 + previousControllerOutput_m1 * 0.3;
    controllerOutput_m2 = controllerOutput_m2 * 0.5 + previousControllerOutput_m2 * 0.3;

    // Update previous controller outputs (PWM)
    previousControllerOutput_m1 = controllerOutput_m1 /4;
    previousControllerOutput_m2 = controllerOutput_m2 /4;

    // 缩放因子来降低速度
    float speedScaleFactor = 0.16;  // 0.5 表示减慢一半的速度
    controllerOutput_m1 *= speedScaleFactor;
    controllerOutput_m2 *= speedScaleFactor;

    // Constrain the controller outputs to the motor control range
    controllerOutput_m1 = constrain(controllerOutput_m1, -255, 255);
    controllerOutput_m2 = constrain(controllerOutput_m2, -255, 255);

      // Calculate motor speeds (in degrees per second) new test
  if (currentTime - lastTime_m1 >= 1000000) {  // Every 1 second
    speed_m1 = ((counter_m1 - lastCounter_m1) * 360.0) / (CPR * GR1 * 2 * (currentTime - lastTime_m1) / 1000000.0);
    lastCounter_m1 = counter_m1;
    lastTime_m1 = currentTime;
  }

  if (currentTime - lastTime_m2 >= 1000000) {  // Every 1 second
    speed_m2 = ((counter_m2 - lastCounter_m2) * 360.0) / (CPR * GR2 * 2 * (currentTime - lastTime_m2) / 1000000.0);
    lastCounter_m2 = counter_m2;
    lastTime_m2 = currentTime;
  }
  // Now you can print the speed of the motors
  Serial.print("Motor 1 Speed: ");
  Serial.print(speed_m1);
  Serial.println(" degrees per second");

  Serial.print("Motor 2 Speed: ");
  Serial.print(speed_m2);
  Serial.println(" degrees per second");
    // Task 6: Send voltage to motors
    Serial.println(controllerOutput_m1);
    
    if (controllerOutput_m1 < 0) {
      digitalWrite(motorPin1_m1, LOW);
      digitalWrite(motorPin2_m1, HIGH);
      analogWrite(enablePin_m1, abs(controllerOutput_m1)); // Use absolute value
    } else {
      digitalWrite(motorPin1_m1, HIGH);
      digitalWrite(motorPin2_m1, LOW);
      analogWrite(enablePin_m1, abs(controllerOutput_m1)); // Use absolute value
    }

    if (controllerOutput_m2 > 0) {
      digitalWrite(motorPin1_m2, LOW);
      digitalWrite(motorPin2_m2, HIGH);
      analogWrite(enablePin_m2, controllerOutput_m2);
    } else {
      digitalWrite(motorPin1_m2, HIGH);
      digitalWrite(motorPin2_m2, LOW);
      analogWrite(enablePin_m2, -controllerOutput_m2);
    }

    // Task 7: Print the current position and demand for plotting
    Serial.print("Current Position of Motor 1: ");
    Serial.println(currentPositionInDegrees_m1);

    Serial.print("Demand Position of Motor 1: ");
    Serial.println(demandPositionInDegrees_m1);

    Serial.print("Current Position of Motor 2: ");
    Serial.println(currentPositionInDegrees_m2);

    Serial.print("Demand Position of Motor 2: ");
    Serial.println(demandPositionInDegrees_m2);
  }
}

void updateEncoder_m1() {
  int aState_m1 = digitalRead(encoderPinA_m1);  // 读取编码器A引脚的当前状态
  if (aState_m1 != aLastState_m1) {  // 如果状态变化
    if (digitalRead(encoderPinB_m1) != aState_m1) {
      counter_m1++;  // 顺时针旋转
    } else {
      counter_m1--;  // 逆时针旋转
    }
    aLastState_m1 = aState_m1;  // 更新最后的状态
  }
}

// Interrupt function for tracking the encoder positions for motor 2
void updateEncoder_m2() {
  int aState_m2 = digitalRead(encoderPinA_m2);  // 读取编码器A引脚的当前状态
  if (aState_m2 != aLastState_m2) {  // 如果状态变化
    if (digitalRead(encoderPinB_m2) != aState_m2) {
      counter_m2++;  // 顺时针旋转
    } else {
      counter_m2--;  // 逆时针旋转
    }
    aLastState_m2 = aState_m2;  // 更新最后的状态
  }
}
